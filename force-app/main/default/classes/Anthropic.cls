/**
 * This class provides methods for interacting with the Anthropic API.
 */
public with sharing class Anthropic {
    // Constants for different Anthropic models
    public static final String MODEL_CLAUDE_OPUS_4 = 'claude-opus-4-20250514';
    public static final String MODEL_CLAUDE_SONNET_4 = 'claude-sonnet-4-20250514';
    public static final String MODEL_CLAUDE_SONNET_37 = 'claude-3-7-sonnet-20250219';

    // The API endpoint for messages
    @TestVisible private static final String ANTHROPIC_ENDPOINT = 'https://api.anthropic.com';
    @TestVisible private static final String MESSAGES_ENDPOINT = ANTHROPIC_ENDPOINT + '/v1/messages';

    // API Parameters
    private final String apiModel;
    private Decimal apiTemperature;
    private String apiKey = AI_API_Settings__c.getOrgDefaults().Anthropic_API_Key__c;
    public static final Decimal DEFAULT_TEMPERATURE = 0;
    public static final String AVAILABLE_MODELS = 'claude-opus-4-20250514;claude-sonnet-4-20250514;claude-3-7-sonnet-20250219';

    // Single constructor, apiKey and temp are optional
    public Anthropic(String model, String apiKey, Decimal temp) {
        this.apiModel = model;
        if (apiKey != null) this.apiKey = apiKey;
        if (temp != null) this.apiTemperature = temp;
    }

    /**
     * Get the Anthropic API key from Custom Settings
     * @return String The Anthropic API key
     */
    @AuraEnabled(cacheable=true)
    public static String getAnthropicApiKey() {
        AI_API_Settings__c settings = AI_API_Settings__c.getInstance();
        return settings?.Anthropic_API_Key__c;
    }

    /**
     * Static method to get a reply from Anthropic API (for LWC integration)
     * @param model The Anthropic model to use
     * @param prompt The input prompt for the API
     * @param temperature The temperature setting for creativity
     * @param apiKey The Anthropic API key
     * @return String The reply generated by the API
     */
    @AuraEnabled(cacheable=false)
    public static String getReply(String model, String prompt, Decimal temperature, String apiKey) {
        if (String.isBlank(apiKey)) {
            throw new AnthropicException('Anthropic API key is required.');
        }
        
        Anthropic anthropic = new Anthropic(model, apiKey, temperature);
        return anthropic.getReply(prompt);
    }

    /**
     * Get a reply from the Anthropic API using the given prompt
     * @param prompt The input prompt for the API
     * @return String The reply generated by the API
     */
    public String getReply(String prompt) {
        HttpRequest req = createHttpRequest(this.apiModel, prompt);
        Http http = new Http();
        return parseChatReply(http.send(req));
    }

    private HttpRequest createHttpRequest(String model, String prompt) {
        HttpRequest req = new HttpRequest();
        req.setEndpoint(MESSAGES_ENDPOINT);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/json');
        req.setHeader('x-api-key', apiKey); // sf-scanner-ignore ApexSuggestUsingNamedCred Can't use Named Credentials for Anthropic
        req.setHeader('anthropic-version', '2023-06-01');
        req.setTimeout(120000);
        
        String requestBody = getChatRequestBody(model, createChatMessages(prompt));
        req.setBody(requestBody);
        
        // Debug logging
        System.debug('Anthropic API Request - Model: ' + model);
        System.debug('Anthropic API Request - Body: ' + requestBody);
        
        return req;
    }

    private static List<Message> createChatMessages(String prompt) {
        return new List<Message> {
                new Message('user', prompt)
        };
    }

    // This set of request parameters works for the current Anthropic models
    // If in the future we add new models, they need be tested first with Postman to verify the exact set of request parameters
    private String getChatRequestBody(String model, List<Message> messages) {
        Map<String, Object> requestBody = new Map<String, Object>{
            'model' => model,
            'messages' => messages,
            'max_tokens' => 1000,
            'temperature' => this.apiTemperature
        };
        
        // Add web search tool for models that support it
        if (model.equals(MODEL_CLAUDE_OPUS_4) || model.equals(MODEL_CLAUDE_SONNET_4) || 
            model.equals(MODEL_CLAUDE_SONNET_37)) {
            List<Object> tools = new List<Object>{
                new Map<String, Object>{
                    'type' => 'web_search_20250305',
                    'name' => 'web_search',
                    'max_uses' => 5
                }
            };
            requestBody.put('tools', tools);
        }
        
        return JSON.serialize(requestBody);
    }

    private static String parseChatReply(HttpResponse res) {
        Map<String, Object> response = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());

        if (res.getStatusCode() == 429) { // Handle a rate limit error from Anthropic
            throw new AnthropicRateLimitException(parseError(response));
        } else if (response.containsKey('error')) { // Handle any other type of API error
            throw new AnthropicException(parseError(response));
        }

        List<Object> content = (List<Object>) response.get('content');
        if (content == null || content.isEmpty()) {
            throw new AnthropicException('No content received from Anthropic API');
        }
        
        // Build the complete response from all content blocks
        String fullResponse = '';
        
        for (Object contentBlock : content) {
            Map<String, Object> block = (Map<String, Object>) contentBlock;
            String blockType = (String) block.get('type');
            
            if (blockType == 'text') {
                String text = (String) block.get('text');
                if (text != null) {
                    fullResponse += text;
                }
            }
            // Note: We skip web_search_tool_result and server_tool_use blocks
            // as they contain search metadata, not user-facing content
        }
        
        String result = fullResponse.trim();
        if (String.isBlank(result)) {
            return 'I performed a web search but couldn\'t generate a response. Please try asking your question again.';
        }
        
        return result;
    }

    private static String parseError(Map<String, Object> response) {
        Map<String, Object> error = (Map<String, Object>) response.get('error');
        return (String) error.get('message');
    }

    public class Message {
        public String role;
        public String content;

        public Message(String role, String content) {
            this.role = role;
            this.content = content;
        }
    }

    // Used externally as a data wrapper for the Anthropic Flow Step
    public class CalloutData {
        public String           model {get; set;}
        public String           objectName {get; set;}
        public String           replyField {get; set;}
        public Decimal          temperature {get; set;}
        public Map<Id, String>  recordToPromptMap {get; set;}

        public CalloutData(String replyField, String model, Decimal temperature, Map<Id, String> recordToPromptMap, String objectName) {
            this.model = model;
            this.replyField = replyField;
            this.objectName = objectName;
            this.temperature = temperature;
            this.recordToPromptMap = recordToPromptMap;
        }
    }

    public class AnthropicException extends Exception {}
    public class AnthropicRateLimitException extends Exception {}
    public class AnthropicResponseTypeException extends Exception {}

    /**
     * Test method to verify web search is working
     * @return Test result message
     */
    @AuraEnabled(cacheable=false)
    public static String testWebSearch() {
        try {
            String response = getReply(MODEL_CLAUDE_OPUS_4, 'What is the latest news about AI?', DEFAULT_TEMPERATURE, getAnthropicApiKey());
            return 'Web search test successful! Response: ' + response;
        } catch (Exception e) {
            return 'Web search test failed: ' + e.getMessage();
        }
    }
} 