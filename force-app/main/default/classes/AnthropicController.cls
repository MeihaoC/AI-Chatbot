/**
 * Controller class for Anthropic API integration with Lightning Web Components
 * Handles LWC-facing methods and delegates to the main Anthropic service class
 */
public with sharing class AnthropicController {
    
    /**
     * Get the Anthropic API key from Custom Settings
     * @return String The Anthropic API key
     */
    @AuraEnabled(cacheable=true)
    public static String getAnthropicApiKey() {
        AI_API_Settings__c settings = AI_API_Settings__c.getInstance();
        return settings?.Anthropic_API_Key__c;
    }

    /**
     * Static method to get a reply from Anthropic API (for LWC integration)
     * @param model The Anthropic model to use
     * @param prompt The input prompt for the API
     * @param temperature The temperature setting for creativity
     * @param apiKey The Anthropic API key
     * @return String The reply generated by the API
     */
    @AuraEnabled(cacheable=false)
    public static String getReply(String model, String prompt, Decimal temperature, String apiKey) {
        if (String.isBlank(apiKey)) {
            throw new AnthropicException('Anthropic API key is required.');
        }
        
        Anthropic anthropic = new Anthropic(model, apiKey, temperature);
        return anthropic.getReply(prompt);
    }
    
    /**
     * Test method to verify web search is working
     * @return Test result message
     */
    @AuraEnabled(cacheable=false)
    public static String testWebSearch() {
        try {
            String apiKey = getAnthropicApiKey();
            if (String.isBlank(apiKey)) {
                return 'Test failed: API key not configured';
            }
            
            String response = getReply(Anthropic.MODEL_CLAUDE_OPUS_4, 'What is the latest news about AI?', 0, apiKey);
            return 'Web search test successful! Response: ' + response;
        } catch (Exception e) {
            return 'Web search test failed: ' + e.getMessage();
        }
    }
    
    /**
     * Get available Anthropic models for the frontend
     * @return List of available model options
     */
    @AuraEnabled(cacheable=true)
    public static List<ModelOption> getAvailableModels() {
        return new List<ModelOption>{
            new ModelOption('Claude Opus 4', Anthropic.MODEL_CLAUDE_OPUS_4),
            new ModelOption('Claude Sonnet 4', Anthropic.MODEL_CLAUDE_SONNET_4),
            new ModelOption('Claude Sonnet 3.7', Anthropic.MODEL_CLAUDE_SONNET_37)
        };
    }
    
    // Model option wrapper for frontend
    public class ModelOption {
        @AuraEnabled public String label;
        @AuraEnabled public String value;
        
        public ModelOption(String label, String value) {
            this.label = label;
            this.value = value;
        }
    }
    
    // Custom exceptions
    public class AnthropicException extends Exception {}
} 